"""
This is a simple example algorithm.


"""
from glob import glob
from pathlib import Path
{% if cookiecutter.phase.has_json -%}
import json
{%- endif %}
{% if cookiecutter.phase.has_image -%}
import SimpleITK
import numpy
{%- endif %}

INPUT_PATH = Path("/input")
OUTPUT_PATH = Path("/output")
RESOURCE_PATH = Path("resources")

{% if "__should_fail" in cookiecutter.phase %} 1/0 {% endif -%}

def run():
    # Read the input
    {% for ci in cookiecutter.phase.inputs -%}
    {{ ci.slug | replace("-", "_")}} = read_{{ ci.slug | replace("-", "_") }}()
    {% endfor %}
    # Process the inputs, anyway you would like
    _show_torch_cuda_info()


    with open(RESOURCE_PATH / "some_resource.txt", "r") as f:
        print(f.read())

    # For now, let's set some bogus values:
    {% for ci in cookiecutter.phase.outputs -%}
    {{ ci.slug | replace("-", "_")}} =
        {%- if ci.is_image %} numpy.eye(4, 2)
        {%- else %} {"content": "should match the required format"}
        {% endif %}
    {% endfor -%}

    # Save your output
    {% for ci in cookiecutter.phase.outputs -%}
    save_{{ ci.slug | replace("-", "_")}}({{ ci.slug | replace("-", "_")}})
    {% endfor %}
    return 0
{% for ci in cookiecutter.phase.inputs %}

def read_{{ ci.slug | replace("-", "_")}}():
    {% if ci.is_image -%}
    # Use SimpleITK to read a file
    input_files = glob(str(INPUT_PATH / "{{ ci.relative_path }}" / "*.mha"))
    result = SimpleITK.ReadImage(
        input_files[0],
        imageIO="MetaImageIO",  # This MetaIO might need to change depending on the input kind
    )

    # Convert it to a Numpy array
    result = SimpleITK.GetArrayFromImage(result)

    return result
    {% else -%}
    with open(INPUT_PATH / "{{ ci.relative_path }}", "r") as f:
        {% if ci.is_json -%}
        result = f.read()
        {% else -%}
        result = json.loads(result)
        {% endif -%}
    return result
    {% endif %}
{%- endfor %}

{% for ci in cookiecutter.phase.outputs -%}

def save_{{ ci.slug | replace("-", "_")}}(result):
    output_file = OUTPUT_PATH / "{{ ci.relative_path }}"
    {% if ci.is_json -%}
    output_file.parent.mkdir(parents=True, exist_ok=True)
    result = json.dumps(result, indent=4)
    {% endif -%}
    {% if ci.is_image -%}
    output_file.mkdir(parents=True, exist_ok=True)
    # Assuming the result is a Numpy array, convert it to an image
    image = SimpleITK.GetImageFromArray(result)
    SimpleITK.WriteImage(image,
        output_file / "output.mha",
        useCompression=True,
    )
    {% else -%}
    with open(output_file, "w") as f:
        f.write(result)
    {% endif %}

{% endfor -%}

def _show_torch_cuda_info():
    import torch

    print("=+=" * 10)
    print("Collecting Torch CUDA information")
    print(f"Torch CUDA is available: {(available := torch.cuda.is_available())}")
    if available:
        print(f"\tnumber of devices: {torch.cuda.device_count()}")
        print(f"\tcurrent device: { (current_device := torch.cuda.current_device())}")
        print(f"\tproperties: {torch.cuda.get_device_properties(current_device)}")
    print("=+=" * 10)


if __name__ == "__main__":
    raise SystemExit(run())
